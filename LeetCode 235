/** Question:
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” **/

// Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        const int small = min(p->val , q->val) , big = max(p->val , q->val);
        
        // If root is smaller then small, then the answer is definitely on the right subtree, and vice versa:
        while(true)
        {
            if(root->val < small)
                root = root->right;
            else if(root->val > big)
                root = root->left;
            else
                return root;
        }       
        return nullptr; // Doesn't supposed to get here
    }
};
