/** Question:
Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root). **/

// Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        if(!root)
            return {};

        queue< pair<TreeNode* , int> > bfs_q;
        vector<vector<int>> ans;
        bfs_q.push({root , 0});

        // Preforming BFS from root as source node:
        int max_depth = 0;
        while(!bfs_q.empty())
        {
            auto curr_node = bfs_q.front().first;
            int curr_depth = bfs_q.front().second;
            bfs_q.pop();
            if(curr_node == nullptr)
                continue;

            max_depth = max(max_depth , curr_depth);
            if(curr_depth == ans.size())
                ans.push_back({});
            ans[curr_depth].push_back(curr_node->val);

            // Adding neighbors (=children) for future traversing them from left to right:
            bfs_q.push({curr_node->left , curr_depth+1});
            bfs_q.push({curr_node->right , curr_depth+1});
        }
        reverse(ans.begin() , ans.end());    
        return ans;
    }
};
